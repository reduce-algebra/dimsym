%%%%%%%%%%THIS HEADER WILL NOT APPEAR ON ACTUAL RUN%%%%%%%%%%
% Last tested on:
% Fri Feb  6 11:54:14 EST 2004
% With:
% Dimsym.2.3
% Running on:
% Reduce.3.7
%%%%%%%%%%%%%%%%%%%%%END HEADER%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Loading image file: /home/zib/reduce/lisp/psl/alphalinux/red/reduce.img 
REDUCE 3.7, 15-Apr-1999 ...

1: %out "output.del4x";

%del4x

%load packages
load dimsym23$

Dimsym 2.3, 12-October-1999. 
Symmetry determination and linear D.E. package
(c) 1992, 1993 James Sherring; 1997 James Sherring and Geoff Prince
Any publication resulting from these calculations must reference this program.
Users are free to modify this program but it is not to be redistributed
in modified form.


loaddeq(u(2,3) = -(u(2,1)*u(3) + u(2)*u(3,1)));


1


loaddeq(u(1,1,2,2) = (u(3) - x(1))/2);


2


loaddeq(u(1,1,1,1,1) = -(u(1,2,2,2,2) + u(3,1) - 1 - u(2)));


3


mkdets(point);

Equation for (u 1 1 1 1 1) is not strictly in semi-standard form, 
because it should be solved for (u 1 2 2 2 2) as leading derivative, 
which is nominally ordered higher than (u 1 1 1 1 1),
 although this should be ok.

Equation for (u 2 3) is not strictly in semi-standard form, 
because it should be solved for (u 3 1) as leading derivative, 
which is nominally ordered higher than (u 2 3), although this should be ok.


solvedets std;

Solving equations using std algorithm.


made eqn 641 from integrability conditions on eqns 640 and 638 for (df (c 1) (x
2) 4 (x 1))

There are 0 equations remaining.


showdets();

There are no determining equations remaining.

The remaining dependencies are ...

(c 39) depends on ((x 3))
(c 38) depends on ((x 3))
(c 37) depends on ((x 3))
(c 36) depends on ((x 3))
(c 33) depends on ((x 3))
(c 32) depends on ((x 3))
(c 29) depends on ((x 3))
(c 28) depends on ((x 3))
(c 27) depends on ((x 3))
(c 26) depends on ((x 3))
(c 25) depends on ((x 3))
(c 24) depends on ((x 3))
(c 8) depends on ((x 3))


mkgens();


There are 17 symmetries found.

The generators of the finite algebra are:

Gen(1) = @    *u(3) + 4*@    *u(1) + @    *x(2) + @    *x(1)
          u(3)           u(1)         x(2)         x(1)

Gen(2) = @
          x(3)

                                                                   4
Gen(3) = 24*@    *u(3) + 24*@    *u(2) + 24*@    *u(1) - @    *x(2)
             u(3)            u(2)            u(1)         u(1)

                        2     2
          + 3*@    *x(2) *x(1)  - 24*@    *x(3)
               u(1)                   x(3)

Gen(4) = @
          x(2)

The generators of the infinite algebra are:

                                                 2
Gen (5) = 4*@    *df(c(8),x(3)) - @    *c(8)*x(2) *x(1)
             u(3)                  u(1)

                                     2
           + @    *df(c(8),x(3))*x(2) *x(1) + 4*@    *c(8)
              u(1)                               x(1)

                              4       4
Gen (6) = @    *c(24)*( - x(2)  + x(1) )
           u(1)

                                   4         4
Gen (7) = @    *c(25)*x(2)*( - x(2)  + 5*x(1) )
           u(1)

                          3
Gen (8) = @    *c(26)*x(1)
           u(1)

                               3
Gen (9) = @    *c(27)*x(2)*x(1)
           u(1)

                           2
Gen (10) = @    *c(28)*x(1)
            u(1)

                                2
Gen (11) = @    *c(29)*x(2)*x(1)
            u(1)

Gen (12) = @    *c(32)*x(1)
            u(1)

Gen (13) = @    *c(33)*x(2)*x(1)
            u(1)

Gen (14) = @    *c(36)
            u(1)

Gen (15) = @    *c(37)*x(2)
            u(1)

                           2
Gen (16) = @    *c(38)*x(2)
            u(1)

                           3
Gen (17) = @    *c(39)*x(2)
            u(1)

(c 39) depends on ((x 3))
(c 38) depends on ((x 3))
(c 37) depends on ((x 3))
(c 36) depends on ((x 3))
(c 33) depends on ((x 3))
(c 32) depends on ((x 3))
(c 29) depends on ((x 3))
(c 28) depends on ((x 3))
(c 27) depends on ((x 3))
(c 26) depends on ((x 3))
(c 25) depends on ((x 3))
(c 24) depends on ((x 3))
(c 8) depends on ((x 3))


stats();


Time: 3132 ms  plus GC time: 92 ms

Total of 659 equations used, with 39 new arbitrary functions made.

successful operations were :((op*slvall 4) (op*intslv 2) (op*shr1tm 30) (
op*splitec 231) (op*simpeq 281) (op*exp1tm 13) (op*slvtwo 2) (addintcons 1) (
op*sub2sf 1) (op*slvspl 3) (op*get1tm 16) (op*proexp 3))

Variables used to split determining equations were ((x 2) (x 1) (u 2) (u 1) (u 3
3) (u 1 2 2 2 2) (u 1 1 1 1) (u 1 3 2 2) (u 2 2 2 1) (u 3) (u 3 2 2 1) (u 1 2 2
2) (u 3 2 2) (u 2 2 2) (u 1 2 1 1) (u 1 3 2 1) (u 3 2 1) (u 2 2 1) (u 1 2 2) (u
1 3 2) (u 2 2) (u 1 1 1) (u 1 2 1) (u 1 3 1) (u 2 1) (u 1 1) (u 1 2) (u 1 3) (u
3 1) (u 3 2))


%shut "output.del4x";

end;

2: 
3: 
4: 
5: 
6: 
*** End-of-file read 

Quitting
