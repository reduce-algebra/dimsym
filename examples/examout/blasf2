%%%%%%%%%%THIS HEADER WILL NOT APPEAR ON ACTUAL RUN%%%%%%%%%%
% Last tested on:
% Fri Feb  6 12:23:25 EST 2004
% With:
% Dimsym.2.3
% Running on:
% Reduce.3.7
%%%%%%%%%%%%%%%%%%%%%END HEADER%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Loading image file: /home/zib/reduce/lisp/psl/alphalinux/red/reduce.img 
REDUCE 3.7, 15-Apr-1999 ...

1: % blas2


load dimsym23$

Dimsym 2.3, 12-October-1999. 
Symmetry determination and linear D.E. package
(c) 1992, 1993 James Sherring; 1997 James Sherring and Geoff Prince
Any publication resulting from these calculations must reference this program.
Users are free to modify this program but it is not to be redistributed
in modified form.

load dim2ode$



freeunknown a;



loaddeq(   u(3,1)   = -a*u(1)*u(3)   );


1

loaddeq(   u(2,1)   =  u(3)          );


2

loaddeq(    u(2)    =  u(1,1)        );


3

mkdets point;


*** Equation for (u 2 1) is not in semi-standard form, 
because leading derivative (u 2 1) is a total derivative of (u 2)
 which we have an equation for 

Equation for (u 2) is not in semi-standard form, 
because it should be solved for (u 1 1) as leading derivative, 
which is higher order than (u 2).


solvedets std;

Solving equations using std algorithm.


***** Substitutions too deep when substituting given differential equation. 

Cont? (Y or N) y

mkgens();


There are 3 symmetries found.

The generators of the infinite algebra are:

Gen (1) = @    *xi(1)
           x(1)

The generators for the remaining equations are:

(The unknowns in these generators satisfy the remaining determining equations.)

Gen (2) = @    *phi(2)
           u(2)

Gen (3) = @    *phi(3) + @    *phi(1)
           u(3)           u(1)

(phi 3) depends on ((u 3) (u 2) (u 1) (x 1))
(phi 2) depends on ((u 3) (u 2) (u 1) (x 1))
(phi 1) depends on ((u 3) (u 2) (u 1) (x 1))
(xi 1) depends on ((u 3) (u 2) (u 1) (x 1))

stats();


Time: 204 ms

Total of 3 equations used, with 0 new arbitrary functions made.

successful operations were :nil

Variables used to split determining equations were nil


v:=x(1)*@ x(1) - u(1)*@ u(1)-2*u(1,1)*@ u(2) - 3*u(1,1,1)*@ u(3);


v :=  - 3*@    *u(1,1,1) - 2*@    *u(1,1) - @    *u(1) + @    *x(1)
           u(3)               u(2)           u(1)         x(1)

w:=x(1)*@ x(1) - u(1)*@ u(1)-2*u(2)*@ u(2) - 3*u(3)*@ u(3);


w :=  - 3*@    *u(3) - 2*@    *u(2) - @    *u(1) + @    *x(1)
           u(3)           u(2)         u(1)         x(1)


check v;


{u(3) - u(1,1,1),

 3*(u(1,1,1,1) + u(1,1,1)*u(1)*a)}

check w;



end;

2: 
Quitting
